# -*- coding: utf-8 -*-
import xlwt
import io
# import cStringIO
import base64
import time
from openerp import models, fields, api, _
from openerp.exceptions import Warning
from openerp.http import request
from datetime import datetime, date


class SalaryMonthlyStatement(models.TransientModel):
    _name = 'salary.monthly.statement'
    
    today = date.today()
    first_day = today.replace(day=1)
#     last_day = today.replace(day=30)

    start_date = fields.Date(
        string='Start Date',
        required=True,
        default=first_day,
    )
    end_date = fields.Date(
        string='End Date',
        required=True,
#         default=last_day,
    )
    company_id = fields.Many2one(
        'res.company',
        string='Company',
        required=True,
        default=lambda self: self.env.user.company_id,
    )
    employee_ids = fields.Many2many(
        'hr.employee',
        string='Employees'
    )
    
    @api.model
    def _get_rules(self, company_rec):
        rules = self.env['hr.salary.rule'].search(['|',('company_id','=',False),('company_id','=',company_rec.id)], order='sequence')
        RULES_DICT = {}
        cnt = 3
        for rule in rules:
            RULES_DICT.update({rule.code: cnt})
            cnt += 1
        return RULES_DICT

    @api.model
    def _get_rules_names(self, company_rec):
        rules = self.env['hr.salary.rule'].search(
            ['|', ('company_id', '=', False), ('company_id', '=', company_rec.id)], order='sequence')
        RULES_NAME_DICT = {}
        cnt = 3
        for rule in rules:
            RULES_NAME_DICT.update({rule.name: cnt})
            cnt += 1
        return RULES_NAME_DICT

    @api.model
    def _get_rules_for_amount(self, company_rec):
        rules = self.env['hr.salary.rule'].search(
            ['|', ('company_id', '=', False), ('company_id', '=', company_rec.id)], order='sequence')
        RULES_AMOUNT_DICT = {}
        for rule in rules:
            RULES_AMOUNT_DICT.update({rule.code: 0})
        return RULES_AMOUNT_DICT

    @api.model
    def _get_payslips(self):
        domain = []
        domain.append(('date_from', '>=', self.start_date))
        domain.append(('date_from', '<=', self.end_date))
        if self.employee_ids:
            domain.append(('employee_id', 'in', self.employee_ids.ids))
        if self.company_id:
            domain.append(('company_id', '=', self.company_id.id))
        domain.append(('state', '=', 'done'))
        payslips = self.env['hr.payslip'].search(domain, order = 'date_from')
        payslips_dict = {}
        for payslip in payslips:
            if payslip.employee_id.department_id:
                if payslip.employee_id.department_id.id not in payslips_dict:
                    payslips_dict[payslip.employee_id.department_id.id] = payslip
                else:
                    payslips_dict[payslip.employee_id.department_id.id] += payslip
            else:
                if 0 not in payslips_dict:
                    payslips_dict[0] = payslip
                else:
                    payslips_dict[0] += payslip
        if not payslips:
            raise Warning(_('Payslips are not found!'))
        return payslips_dict

    @api.multi
    def print_salary_statement_excel(self):
        workbook = xlwt.Workbook()
        title_style_comp_left = xlwt.easyxf('align: horiz center ; font: name Times New Roman,bold off, italic off, height 450')
        title_style = xlwt.easyxf('align: horiz center ;font: name Times New Roman,bold off, italic off, height 350')
        title_style2 = xlwt.easyxf('font: name Times New Roman, height 200')
        title_style1 = xlwt.easyxf('font: name Times New Roman,bold on, italic off, height 190; borders: top thin, bottom thin, left thin, right thin;')
        title_style1_table_head = xlwt.easyxf('font: name Times New Roman,bold off, italic off, height 200;')
        title_style1_table_head1 = xlwt.easyxf('font: name Times New Roman,bold on, italic off, height 200')
        title_style1_table_head_center = xlwt.easyxf('align: horiz center ;font: name Times New Roman,bold on, italic off, height 200')
        borders = xlwt.easyxf('font: name Times New Roman,bold on, italic off, height 200; borders: top thin;')
 
        sheet_name = 'Monthly Payroll Statement'
        sheet = workbook.add_sheet(sheet_name)
        sheet.write_merge(0, 1, 0, 6, 'Monthly Payroll Statement' , title_style_comp_left)
        sheet.write(3, 0, 'Company:', title_style1_table_head1)
        sheet.write(3, 1, self.company_id.name, title_style2)
 
        row_date_count = 4
        user = request.env.user
        now_date_time = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        sheet.write(3, 3, 'Generated By:', title_style1_table_head1)
        sheet.write(3, 4, user.name, title_style2)
        sheet.write(3, 7, 'Generated On:', title_style1_table_head1)
        sheet.write_merge(3, 3, 8, 9,now_date_time, title_style2)
        start_date = datetime.strftime(datetime.strptime(self.start_date, '%Y-%m-%d'), '%d/%m/%Y')
        end_date = datetime.strftime(datetime.strptime(self.end_date, '%Y-%m-%d'), '%d/%m/%Y')
        sheet.write(row_date_count, 0, 'Start Date:', title_style1_table_head1)
        sheet.write(row_date_count, 1, start_date, title_style2)
        sheet.write(row_date_count, 3, 'End Date:', title_style1_table_head1)
        sheet.write(row_date_count, 4, end_date, title_style2)
 
        RULES_DICT = self._get_rules(self.company_id)
        RULES_NAME_DICT = self._get_rules_names(self.company_id)
        payslips_dict = self._get_payslips()
        payslips_dict_key = payslips_dict.keys()
        list(payslips_dict_key).sort()
 
        sr_count = 1
        payslips_count = 6
        table_head_count = 7
        val_row_count = 8
        final_total_salary = 0.0
        for payslips in payslips_dict_key:
            #payslip_date = datetime.strftime(datetime.strptime(payslips, '%Y-%m-%d'), '%B-%Y')
            #sheet.write(payslips_count, 0, 'Payslip Month:', title_style1_table_head1)
            #sheet.write_merge(payslips_count, payslips_count, 1, 2, payslip_date, title_style2)
            total_rule_amount_dict = self._get_rules_for_amount(self.company_id)
            sheet.write(table_head_count, 0, 'Sr.No', title_style1)
            sheet.write(table_head_count, 1, 'Employee', title_style1)
            sheet.write(table_head_count, 2, 'Department', title_style1)
            for rule in RULES_NAME_DICT:
                sheet.write(table_head_count, RULES_NAME_DICT[rule], rule, title_style1)
            total_salary = 0.0
            for payslip in payslips_dict[payslips]:
                sheet.write(val_row_count, 0, payslip.employee_id.barcode or '', title_style1_table_head)
                sheet.write(val_row_count, 1, payslip.employee_id.name, title_style1_table_head)
                department_name =''
                if payslip.employee_id.department_id:
                    department_name = payslip.employee_id.department_id.name
                sheet.write(val_row_count, 2, department_name, title_style1_table_head)
                sr_count += 1
                for line in payslip.line_ids:
                    sheet.write(val_row_count, RULES_DICT[line.code], self.company_id.currency_id.symbol + ' ' + str(line.total), title_style1_table_head)
                    total_rule_amount_dict[line.code] += line.total
                    if line.code == 'NET':
                        total_salary += line.total
                val_row_count += 1
 
            sr_count = 1
            for line in payslip.line_ids:
                sheet.write(val_row_count, RULES_DICT[line.code], self.company_id.currency_id.symbol + ' ' + str(total_rule_amount_dict[line.code]), borders)

            #sheet.write_merge(val_row_count, val_row_count, len(RULES_DICT), len(RULES_DICT) + 1, 'Total Salary', borders)
            #sheet.write(val_row_count, len(RULES_DICT) + 2, self.company_id.currency_id.symbol + ' ' + str(total_salary), borders)
            final_total_salary = final_total_salary + total_salary
 
            payslips_count = val_row_count + 2
            table_head_count = val_row_count + 3
            val_row_count = table_head_count + 1
        val_row_count = val_row_count - 3
        sheet.write_merge(val_row_count, val_row_count, len(RULES_DICT), len(RULES_DICT) + 1, 'Grand Total Salary', borders)
        sheet.write(val_row_count, len(RULES_DICT) + 2, self.company_id.currency_id.symbol + ' ' + str(final_total_salary), borders)
#         stream = cStringIO.StringIO()
        stream = io.BytesIO() # odoo11
        workbook.save(stream)
        attach_id = self.env['salary.monthly.statement.excel'].create({
            'name':'Salary Statement Monthly.xls',
            'xls_output': base64.encodestring(stream.getvalue())
        })
        return {
            'context': self.env.context,
            'view_type': 'form',
            'view_mode': 'form',
            'res_model': 'salary.monthly.statement.excel',
            'res_id':attach_id.id,
            'type': 'ir.actions.act_window',
            'target':'new'
        }

class SalaryMonthlyStatementExcel(models.TransientModel):
    _name = 'salary.monthly.statement.excel'
    _description = 'Wizard to store the Excel output'

    xls_output = fields.Binary(
       string='Excel Output',
       readonly=True
    )
    name = fields.Char(
        string='File Name',
        help='Save report as .xls format',
        default='Salary Statement Monthly.xls',
    )

# #vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
