// pos_return_order js
odoo.define('bi_pos_return_order.pos', function(require) {
    "use strict";

    var models = require('point_of_sale.models');
    var screens = require('point_of_sale.screens');
    var core = require('web.core');
    var gui = require('point_of_sale.gui');
    var popups = require('point_of_sale.popups');
    //var Model = require('web.DataModel');
    var QWeb = core.qweb;
    var rpc = require('web.rpc');
    var utils = require('web.utils');
    var field_utils = require('web.field_utils');

    var _t = core._t;



// Load Models here...

    models.load_models({
        model: 'pos.order',
        fields: ['name', 'id', 'date_order', 'partner_id', 'pos_reference', 'lines', 'amount_total', 'session_id', 'state', 'company_id'],
        domain: null,
        loaded: function(self, orders){
        	//console.log("111111111111loadedddddddddddddddddddddddddddddddddddd",orders);
        	self.db.all_orders_list = orders;
        	//console.log("111111111111loadedddddddddddddddddddddddddddddddddddd",orders);

        	self.db.get_orders_by_id = {};
            orders.forEach(function(order) {
                self.db.get_orders_by_id[order.id] = order;
            });

            self.orders = orders;
            //console.log("***************orderssssssssssssssssssssssss", orders);
        },
    });

    models.load_models({
        model: 'pos.order.line',
        fields: ['order_id', 'product_id', 'discount', 'qty', 'price_unit',],
        domain: function(self) {
            var order_lines = []
            var orders = self.db.all_orders_list;
            for (var i = 0; i < orders.length; i++) {
                order_lines = order_lines.concat(orders[i]['lines']);
            }
            //console.log("order_linessssssssssssssssssssssssssssssssssssssssssssss",order_lines);
            return [
                ['id', 'in', order_lines]
            ];
            //console.log("order_linessssssssssssssssssssssssssssssssssssssssssssss",order_lines);
        },
        loaded: function(self, pos_order_line) {
            //console.log("111111111111loadedddddddddddddddddddddddddddddddddddd",models);

            self.db.all_orders_line_list = pos_order_line;
            //console.log("111111111111loadeddd pos_order_line",pos_order_line);
            self.db.get_lines_by_id = {};
            pos_order_line.forEach(function(line) {
                self.db.get_lines_by_id[line.id] = line;
            });

            self.pos_order_line = pos_order_line;
            //console.log("***************self.pos_pos_order_linee", self.pos_order_line);

        },
    });



    // SeeAllOrdersScreenWidget start

    var SeeAllOrdersScreenWidget = screens.ScreenWidget.extend({
        template: 'SeeAllOrdersScreenWidget',
        init: function(parent, options) {
            this._super(parent, options);
            //this.options = {};
        },
        //

        line_selects: function(event,$line,id){
        	//console.log('calllllllll',id);
        	var self = this;
            var orders = this.pos.db.get_orders_by_id[id];
            //console.log("line select orderssssssssssssssssssssssssssssssssssssss", orders);
            this.$('.client-list .lowlight').removeClass('lowlight');
            if ( $line.hasClass('highlight') ){
                $line.removeClass('highlight');
                $line.addClass('lowlight');
                this.display_orders_detail('hide',orders);
                //this.new_clients = null;
                //this.toggle_save_button();
            }else{
                this.$('.client-list .highlight').removeClass('highlight');
                $line.addClass('highlight');
                var y = event.pageY - $line.parent().offset().top;
                this.display_orders_detail('show',orders,y);
                //this.new_clients = orders;
                //this.toggle_save_button();
            }

        },

        display_orders_detail: function(visibility,order,clickpos){
            var self = this;
            var contents = this.$('.orders-details-contents');
            var parent   = this.$('.client-list').parent();
            var scroll   = parent.scrollTop();
            var height   = contents.height();
            var orderlines = [];





            if(visibility === 'show'){
                contents.empty();
                //console.log('ssssssssssssssssssss',visibility);
                contents.append($(QWeb.render('OrderDetails',{widget:this,order:order})));

                var new_height   = contents.height();

                if(!this.details_visible){
                    if(clickpos < scroll + new_height + 20 ){
                        parent.scrollTop( clickpos - 20 );
                    }else{
                        parent.scrollTop(parent.scrollTop() + new_height);
                    }
                }else{
                    parent.scrollTop(parent.scrollTop() - height + new_height);
                }

                this.details_visible = true;




            // Click on Return Order Button, Popup Will Open...
            contents.on('click','.button.return-order',function(){
            //self.$(".return-order").on("click", function() {
            	//var self = this;
            	var orderlines = [];

            	var order_list = self.pos.db.all_orders_list;
            	//console.log("************************************************order_list",order_list)
                var order_line_data = self.pos.db.all_orders_line_list;
                //console.log("order_line_data ************************************************",order_line_data )

                //console.log('ssssssssssssssssssss',order.lines);
                order.lines.forEach(function(line_id) {
		            var line = self.pos.db.get_lines_by_id[line_id];
		            //console.log("*************line ************************************************",line)
		            var product = self.pos.db.get_product_by_id(line.product_id[0]);
		            //console.log("*************products ************************************************",product)
		            orderlines.push(line);
		            //console.log('original_orderlinesssssssssssssssssssss',orderlines);
                });

            	self.gui.show_popup('pos_return_order_popup_widget', { 'orderlines': orderlines, 'order': order });
            });



                //this.toggle_save_button();
            } else if (visibility === 'hide') {
                //console.log('sssssssshhhhhhhssssssssssss hideeeeeeeeeeeeeeeeeeeeeeeeeeeeee',visibility);
                contents.empty();
                if( height > scroll ){
                    contents.css({height:height+'px'});
                    contents.animate({height:0},400,function(){
                        contents.css({height:''});
                    });
                }else{
                    parent.scrollTop( parent.scrollTop() - height);
                }
                this.details_visible = false;
                //this.toggle_save_button();
            }
        },

        get_selected_partner: function() {
            var self = this;
            if (self.gui)
                return self.gui.get_current_screen_param('selected_partner_id');
            else
                return undefined;
        },

         render_list_orders: function(orders){
            //console.log("got ordersssssssssssssssssssssssssssssssssssssss", orders);

            var self = this;
            var selected_partner_id = this.get_selected_partner();
            //console.log("<<<<<<<<<<<<<<<<<<<<<<<selected_partner_id>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",selected_partner_id)
            var selected_client_orders = [];
            if (selected_partner_id != undefined) {
                for (var i = 0; i < orders.length; i++) {
                    if (orders[i].partner_id[0] == selected_partner_id)
                        selected_client_orders = selected_client_orders.concat(orders[i]);
                }
                orders = selected_client_orders;
            }

            var content = this.$el[0].querySelector('.orders-list-contents');
	        //console.log("contentssssssssssssssssssssss", content);
            content.innerHTML = "";
            for(var i = 0, len = Math.min(orders.length,1000); i < len; i++){
                var order    = orders[i];
                var ordersline_html = QWeb.render('OrdersLine',{widget: this, order:orders[i], selected_partner_id: orders[i].partner_id[0]});
                //console.log("orders[i].partner_id[0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", orders[i].partner_id[0]);
                var ordersline = document.createElement('tbody');
                ordersline.innerHTML = ordersline_html;
                ordersline = ordersline.childNodes[1];
                content.appendChild(ordersline);

            }
        },
        //
        show: function(options) {
            var self = this;
            this._super(options);

            this.details_visible = false;

            var orders = self.pos.db.all_orders_list;
            //console.log("***************************************ordersssssssssssssss",orders)
            this.render_list_orders(orders, undefined);

	    	this.$('.back').click(function(){
		        //self.gui.back();
		        self.gui.show_screen('products');
            });

            //self.$('.orders-list-contents').delegate('.orders-line', 'click', function(event) {
            this.$('.orders-list-contents').delegate('.orders-line', 'click', function(event) {
                self.line_selects(event, $(this), parseInt($(this).data('id')));
            });

            var contents = self.$('.orders-details-contents');
            contents.empty();
            var parent = self.$('.client-list').parent();
            //console.log("***************************************parenttttttttttttt",parent)
            parent.scrollTop(0);


        },
        //


    });
    gui.define_screen({
        name: 'see_all_orders_screen_widget',
        widget: SeeAllOrdersScreenWidget
    });

    // End SeeAllOrdersScreenWidget



	// Start SeeAllOrdersButtonWidget

    var SeeAllOrdersButtonWidget = screens.ActionButtonWidget.extend({
        template: 'SeeAllOrdersButtonWidget',

        button_click: function() {
            var self = this;
            this.gui.show_screen('see_all_orders_screen_widget', {});
        },

    });

    screens.define_action_button({
        'name': 'See All Orders Button Widget',
        'widget': SeeAllOrdersButtonWidget,
        'condition': function() {
            return true;
        },
    });
    // End SeeAllOrdersButtonWidget

// Start ClientListScreenWidget
		gui.Gui.prototype.screen_classes.filter(function(el) { return el.name == 'clientlist'})[0].widget.include({
            show: function(){
		        this._super();
		        var self = this;
		        this.$('.view-orders').click(function(){
		        	//console.log("callledddddddddddddddddddddddddddddddddddddddddd all orderssssssssssss")
            		self.gui.show_screen('see_all_orders_screen_widget', {});
            	});


            $('.selected-client-orders').on("click", function() {
                self.gui.show_screen('see_all_orders_screen_widget', {
                    'selected_partner_id': this.id
                });
            });

        },
    });



    // Popup start

    var PosReturnOrderPopupWidget = popups.extend({
        template: 'PosReturnOrderPopupWidget',
        init: function(parent, args) {
            this._super(parent, args);
            this.options = {};
        },
        //
        show: function(options) {
        	options = options || {};
        	//console.log("optionssssssssssssssssssssssssssssssssssssssssssssssssssss",options)
            var self = this;
            this._super(options);
            this.orderlines = options.orderlines || [];
            //console.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!this.orderlines",this.orderlines)

        },
        //
        renderElement: function() {
            var self = this;
            this._super();
            var selectedOrder = this.pos.get_order();
            //console.log("selewcted orderrrrrrrrrrrrrr",selectedOrder)

            var orderlines = self.options.orderlines;
            //console.log("<<<<<<<<<<< orderlinesssssssssssssssssssssssssssssssssssssssr",orderlines)

            var order = self.options.order;
            //console.log(">>>>>>>>>>>>>> Orderrrrrrrrrrrrrrrrrrrrrrrrrr",order)

			var return_products = {};


            this.$('#apply_return_order').click(function() {
                //console.log("Apply-Return-Orderrrrrrrrrrr callleddddddddddddd")
                var entered_code = $("#entered_item_qty").val();
                //console.log("##################entered_code", entered_code);

                var list_of_qty = $('.entered_item_qty');
                //console.log("##################entered_code", list_of_qty);


				$.each(list_of_qty, function(index, value) {
				 	var entered_item_qty = $(value).find('input');
               	    var qty_id = parseFloat(entered_item_qty.attr('qty-id'));
		            var line_id = parseFloat(entered_item_qty.attr('line-id'));
		            var entered_qty = parseFloat(entered_item_qty.val());
		            //console.log("********************input_element",entered_item_qty, qty_id, line_id, entered_qty);

		            return_products[line_id] = entered_qty;
		            //console.log("????????????????return_products????????????????", return_products);

            	});
            	//return return_products;


            	Object.keys(return_products).forEach(function(line_id) {
            		//console.log("?22222222222222222return_products????????????????", return_products,line_id);
            		var line = self.pos.db.get_lines_by_id[line_id];
            		//console.log("##################line", line);
                	var product = self.pos.db.get_product_by_id(line.product_id[0]);
                	selectedOrder.add_product(product, {
                        quantity: parseFloat(return_products[line_id]),
                        price: - line.price_unit,
                        discount: line.discount
                    });
                    selectedOrder.selected_orderline.original_line_id = line.id;
                    //console.log("lasttttttttttttttttttttttt selewcted orderrrrrrrrrrrrrr",selectedOrder)
            	});
            	self.pos.set_order(selectedOrder);
            	//console.log("attttt           selectedOrderrrrrrrrrrrrrrrrrr", selectedOrder);

            	self.gui.show_screen('products');

               });


        },

    });
    gui.define_popup({
        name: 'pos_return_order_popup_widget',
        widget: PosReturnOrderPopupWidget
    });

    // End Popup start





});
